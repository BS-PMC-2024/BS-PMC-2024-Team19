pipeline {
    agent any

    environment {
        DOCKER_IMAGE_FRONTEND = 'talelzam/frontend:latest'
        DOCKER_IMAGE_BACKEND = 'talelzam/backend:latest'
        REGISTRY = 'docker.io'
        REGISTRY_CREDENTIALS = 'dockerhub'
    }

    stages {
        stage('Clone repository') {
            steps {
                // Clone the repository from GitHub
                git 'https://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@github.com/BS-PMC-2024/BS-PMC-2024-Team19.git'
            }
        }

        stage('Verify Dockerfile and Docker Compose') {
            steps {
                script {
                    // Print the current directory
                    sh 'pwd'
                    // Verify the contents of the directory to ensure Dockerfile and docker-compose.yml exist
                    sh 'ls -la'
                }
            }
        }

        stage('Show package.json') {
            steps {
                script {
                    // Display the package.json file for frontend
                    dir('frontend') {
                        sh 'cat package.json'
                    }
                    // Display the package.json file for backend
                    dir('backend') {
                        sh 'cat package.json'
                    }
                }
            }
        }

        stage('Build Backend Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in the backend directory
                    docker.build(DOCKER_IMAGE_BACKEND, 'backend/')
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in the frontend directory
                    docker.build(DOCKER_IMAGE_FRONTEND, 'frontend/')
                }
            }
        }

        stage('Run Backend Tests') {
            steps {
                script {
                    // Run tests for the backend inside the Docker container
                    docker.image(DOCKER_IMAGE_BACKEND).inside {
                        sh 'npm test'
                    }
                }
            }
        }

        stage('Run Frontend Tests') {
            steps {
                script {
                    // Run tests for the frontend inside the Docker container
                    docker.image(DOCKER_IMAGE_FRONTEND).inside {
                        sh 'npm test'
                    }
                }
            }
        }

        stage('Push Backend Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub and push the backend image
                    docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
                        docker.image(DOCKER_IMAGE_BACKEND).push('latest')
                    }
                }
            }
        }

        stage('Push Frontend Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub and push the frontend image
                    docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
                        docker.image(DOCKER_IMAGE_FRONTEND).push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker images and containers
                sh 'docker system prune -f'
            }
        }
    }
}
