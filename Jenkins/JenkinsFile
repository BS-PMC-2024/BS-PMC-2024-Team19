pipeline {
    agent any

    environment {
        FRONTEND_DOCKER_IMAGE = 'talelzam/frontend:latest'
        BACKEND_DOCKER_IMAGE = 'talelzam/backend:latest'
        REGISTRY = 'docker.io'
        REGISTRY_CREDENTIALS = 'dockerhub'
        FRONTEND_DOCKERFILE_PATH = 'frontend/Dockerfile'
        BACKEND_DOCKERFILE_PATH = 'backend/Dockerfile'
        BUILD_CONTEXT = '.'
    }

    stages {
        stage('Clone repository') {
            steps {
                // Clone the repository from GitHub
                git 'https://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@github.com/BS-PMC-2024/BS-PMC-2024-Team19.git'
            }
        }

        stage('Verify Dockerfile and Docker Compose') {
            steps {
                script {
                    // Print the current directory
                    sh 'pwd'
                    // Verify the contents of the directory to ensure Dockerfile and docker-compose.yml exist
                    sh 'ls -la'
                }
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    // Build Docker image for the backend
                    docker.build("${BACKEND_DOCKER_IMAGE}", "-f ${BACKEND_DOCKERFILE_PATH} backend/")
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    // Build Docker image for the frontend
                    docker.build("${FRONTEND_DOCKER_IMAGE}", "-f ${FRONTEND_DOCKERFILE_PATH} frontend/")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests inside the Docker container
                    sh 'docker run --rm ${FRONTEND_DOCKER_IMAGE} npm run test'
                }
            }
        }

        stage('Push Backend Docker Image') {
            steps {
                script {
                    // Tag and push the backend Docker image
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        sh "docker tag ${BACKEND_DOCKER_IMAGE} ${REGISTRY}/${BACKEND_DOCKER_IMAGE}"
                        sh "docker push ${REGISTRY}/${BACKEND_DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Push Frontend Docker Image') {
            steps {
                script {
                    // Tag and push the frontend Docker image
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        sh "docker tag ${FRONTEND_DOCKER_IMAGE} ${REGISTRY}/${FRONTEND_DOCKER_IMAGE}"
                        sh "docker push ${REGISTRY}/${FRONTEND_DOCKER_IMAGE}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker images and containers
                sh 'docker system prune -af || true'
            }
        }
    }
}
