pipeline {
    agent{
        docker{
            image 'docker:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        FRONTEND_DOCKER_IMAGE = 'talelzam/frontend:latest'
        BACKEND_DOCKER_IMAGE = 'talelzam/backend:latest'
        REGISTRY = 'docker.io'
        REGISTRY_CREDENTIALS = 'dockerhub'
    }

    stages {
        stage('Clone repository') {
            steps {
                // Clone the repository from GitHub
                git 'https://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@github.com/BS-PMC-2024/BS-PMC-2024-Team19.git'
            }
        }

        stage('Verify Dockerfile and Docker Compose') {
            steps {
                script {
                    // Print the current directory
                    sh 'pwd'
                    // Verify the contents of the directory to ensure Dockerfile and docker-compose.yml exist
                    sh 'ls -la'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build Docker images using docker-compose
                    sh 'docker-compose -f docker-compose.yml build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests inside the Docker container using docker-compose
                    sh 'docker-compose -f docker-compose.yml run --rm frontend npm run test'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    // Tag and push the backend Docker image
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        sh "docker tag ${BACKEND_DOCKER_IMAGE} ${REGISTRY}/${BACKEND_DOCKER_IMAGE}"
                        sh "docker push ${REGISTRY}/${BACKEND_DOCKER_IMAGE}"
                    }
                    // Tag and push the frontend Docker image
                    docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
                        sh "docker tag ${FRONTEND_DOCKER_IMAGE} ${REGISTRY}/${FRONTEND_DOCKER_IMAGE}"
                        sh "docker push ${REGISTRY}/${FRONTEND_DOCKER_IMAGE}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker images and containers
                sh 'docker-compose down'
                sh 'docker system prune -af || true'
            }
        }
    }
}
